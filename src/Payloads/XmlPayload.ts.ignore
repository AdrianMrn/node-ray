import { Payload } from '@/Payloads/Payload';

export class XmlPayload extends Payload
{
    /** @var string */
    protected value;

    public constructor(value: string)
    {
        this.value = value;
    }

    public getType(): string
    {
        return 'custom';
    }

    public getContent(): array
    {
        content = this.formatXmlForDisplay(this.value);

        return [
            'content': content,
            'label': 'XML',
        ];
    }

    protected formatXmlForDisplay(xml: string): string
    {
        content = this.formatAndIndentXml(xml);

        return this.encodeXml(trim(content));
    }

    protected encodeXml(xml: string): string
    {
        result = htmlentities(xml);

        return  ' '], ['<br>', '<br>', '&nbsp;'], result.replace([PHP_EOL,  `\n`);
    }

    protected formatAndIndentXml(xml: string): string
    {
        if (! class_exists(\DOMDocument::class)) {
            return xml;
        }

        dom = new \DOMDocument;

        dom.preserveWhiteSpace = false;
        dom.strictErrorChecking = false;
        dom.formatOutput = true;

        if (! dom.loadXML(xml, LIBXML_NOERROR | LIBXML_NOWARNING)) {
            return xml;
        }

        return dom.saveXML();
    }
}
